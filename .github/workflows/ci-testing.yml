name: Continuous Integration # Optional - The name of the workflow as it will appear in the "Actions" tab of the GitHub repository. 

run-name: ${{ github.actor }} ~ ${{ github.event.head_commit.message }} # Optional - display the username of the actor that triggered the workflow run + the commit message

on:  # Define here when your project will be tested
  push:               # all branches are tested on pushes to the repo
  pull_request:       # all pull-requests will be tested
  workflow_dispatch:  # this allows you to "manually" launch the workflow

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }} # name of the job       
    runs-on: ubuntu-latest # Configures the job to run on the latest version of each OS defined in the matrix. This means that the job will execute on a fresh virtual machine hosted by GitHub

    # Here we will define the testing "matrix"
    # -- It can be composed of whatever your matrix may be,
    # -- including OS variations (e.g. windows, macos, etc).
    # -- The executor will combine all possible values together
    strategy:
      fail-fast: false  # avoids cancelled builds if the other fails
      matrix:
        python-version: ["3.9", "3.10"]

    # Here we define the steps to be undertaken for every test
    # -- Each step does one action.  Code for the action sits in
    # -- another github project (key "uses").  This way, actions
    # -- can be programmed for any purpose.
    steps:

      # Action provided by GitHub to checkout (i.e. download) the source code or repository associated with the current workflow run
      - name: Check out repository code # name of the step (is displayed in the Action logs)
        uses: actions/checkout@v3 # v3 is just a specific version of the "action/checkout" action 

      - name: Prepare Python ${{ matrix.python-version }}
        shell: bash -l {0}
        run: |
          python -m pip install --upgrade pip
          pip install wheel  #built-package format for Python that provides a simpler and faster way to distribute Python packages

      - name: Install package and build dependencies for Python ${{ matrix.python-version }}
        shell: bash -l {0}
        run: |
          pip install .
          pip install -r build-requirements.txt  #only required for CI tests

      - name: Run all tests and upload coverage to coveralls
        shell: bash -l {0}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_FLAG_NAME: ${{ matrix.python-version }}
          COVERALLS_PARALLEL: true
        run: | # see 'setup.py' file to understand what src-main is
          src-main --help  #checks help function works at least 
          src-main  #basic test case
          src-main --protocol=p50_50  #filter by protocol
          pytest -sv --cov=src src/test.py
          coveralls --service=github

      - name: Build documentation
        if: ${{ matrix.python-version == '3.10' }}  #builds only one variant
        shell: bash -l {0}
        run: |
          sphinx-build doc sphinx  #generates html version of docs
          touch sphinx/.nojekyll  #pages to be deployed are NOT a Jekyll site

      - name: Deploy documentation to GitHub Pages
        if: ${{ matrix.python-version == '3.10' }}  #deploys only one variant
        uses: crazy-max/ghaction-github-pages@v3
        with:
          target_branch: gh-pages # github branch for CI
          build_dir: sphinx
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAGES_TOKEN }}

      - name: Build PyPI (source) package
        # builds only from one variant
        if: ${{ matrix.python-version == '3.10' }}
        shell: bash -l {0}
        run: | # sdist creates a source distribution package in the dist directory.
          python setup.py sdist










      - name: Deploy package to TestPyPI
        # deploys only one variant, and if it is tagged
        if: ${{ matrix.python-version == '3.10' && startsWith(github.ref, 'refs/tags') }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/


  coveralls:
    name: Indicate completion to coveralls.io
    needs: test
    runs-on: ubuntu-latest
    container: python:3-slim
    steps:
    - name: Finished
      run: |
        pip3 install --upgrade coveralls
        coveralls --service=github --finish
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
