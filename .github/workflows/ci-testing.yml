name: Continuous Integration # Optional - The name of the workflow as it will appear in the "Actions" tab of the GitHub repository. 

run-name: ${{ github.actor }} ~ ${{ github.event.head_commit.message }} # Optional - display the username of the actor that triggered the workflow run + the commit message

on:  # Define here when your project will be tested
  push:               # all branches are tested on pushes to the repo
  pull_request:       # all pull-requests will be tested
  workflow_dispatch:  # this allows you to "manually" launch the workflow

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }} # name of the job
    
	runs-on: ubuntu-latest # Configures the job to run on the latest version of each OS defined in the matrix. This means that the job will execute on a fresh virtual machine hosted by GitHub


    # Here we will define the testing "matrix"
    # -- It can be composed of whatever your matrix may be,
    # -- including OS variations (e.g. windows, macos, etc).
    # -- The executor will combine all possible values together
    strategy:
      fail-fast: false  # avoids cancelled builds if the other fails
      matrix:
        python-version: ["3.8", "3.9"]

    # Here we define the steps to be undertaken for every test
    # -- Each step does one action.  Code for the action sits in
    # -- another github project (key "uses").  This way, actions
    # -- can be programmed for any purpose.
    steps:

      # Action provided by GitHub to checkout (i.e. download) the source code or repository associated with the current workflow run
      - name: Check out repository code # name of the step (is displayed in the Action logs)
        uses: actions/checkout@v3 # v3 is just a specific version of the "action/checkout" action 

      # Action provided by "conda-incubator" to setup conda env
      - name: Setup miniconda
        uses: conda-incubator/setup-miniconda@v2 # This action sets up a Conda environment with below parameters
        with:
          miniconda-version: "latest"
          python-version: ${{ matrix.python-version }}
          auto-update-conda: true
          auto-activate-base: false # specifies that the base Conda environment should not be activated automatically.
          activate-environment: project
          environment-file: environment.yml #specifies the path to the Conda environment configuration file, which lists the packages and dependencies needed for the environment.

      # Default action: run something
      - name: Run tests
        shell: bash -l {0} # specifies that the bash shell should be used to execute the following commands.
        # 'run: | ' indicates that a multi-line command follows 
        run: |
          conda info -a
          pytest -sv --cov=. test.py
      - name: Upload coverage to coveralls.io
        shell: bash -l {0}
        env: # This is a YAML mapping that specifies environment variables to be used in the following commands.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # sets GITHUB_TOKEN environment variable to the value of the secrets.GITHUB_TOKEN. This token is used to authenticate with GitHub #API.
          COVERALLS_FLAG_NAME: ${{ matrix.python-version }} #sets the COVERALLS_FLAG_NAME environment variable. This variable is used to specify the name of the test suite in coveralls.io.
          COVERALLS_PARALLEL: true # sets the COVERALLS_PARALLEL environment variable to true, which enables parallel test execution in coveralls.io.
        run: |
          conda info -a
          coveralls --service=github
  coveralls:
    name: Indicate completion to coveralls.io
    needs: test
    runs-on: ubuntu-latest
    container: python:3-slim
    steps:
    - name: Finished
      run: |
        pip3 install --upgrade coveralls
        coveralls --service=github --finish
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

